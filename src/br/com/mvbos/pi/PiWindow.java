/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package br.com.mvbos.pi;

import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.HeadlessException;
import java.io.File;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.SwingUtilities;

/**
 *
 * @author MarcusS
 */
public class PiWindow extends javax.swing.JFrame {

    private File selected;
    private float zoom = 1f;
    private final PiCoreGraphics core;

    /**
     * Creates new form PiWindow
     */
    public PiWindow() {
        core = new PiCoreGraphics();
        initComponents();

        SwingUtilities.invokeLater(new Runnable() {

            @Override
            public void run() {
                updatePieceX();
                updatePieceY();

                posConstructor();
            }
        });

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        fileChooser = new javax.swing.JFileChooser();
        jScrollPane1 = new javax.swing.JScrollPane();
        jEditorPane1 = new javax.swing.JEditorPane();
        tfFile = new javax.swing.JTextField();
        btnOpen = new javax.swing.JButton();
        tfPiecesX = new javax.swing.JTextField();
        cbOrientation = new javax.swing.JComboBox();
        btnExport = new javax.swing.JButton();
        lblInfo = new javax.swing.JLabel();
        pnPreview = createPanel();
        tfPiecesY = new javax.swing.JTextField();
        btnZoomUp = new javax.swing.JButton();
        btnZoomDown = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        menuMergeAll = new javax.swing.JMenuItem();

        fileChooser.setCurrentDirectory(new java.io.File("C:\\Users\\marcuss\\Pictures"));
        fileChooser.setFileSelectionMode(javax.swing.JFileChooser.FILES_AND_DIRECTORIES);

        jScrollPane1.setViewportView(jEditorPane1);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        tfFile.setEditable(false);
        tfFile.setText("C:\\Users\\marcuss\\Pictures");

        btnOpen.setText("...");
        btnOpen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOpenActionPerformed(evt);
            }
        });

        tfPiecesX.setText("2");
        tfPiecesX.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tfPiecesXKeyReleased(evt);
            }
        });

        cbOrientation.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Portrait", "Landscape", "Reverse Portrait", "Reverse Landscape" }));
        cbOrientation.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cbOrientationItemStateChanged(evt);
            }
        });

        btnExport.setText("Merge");
        btnExport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExportActionPerformed(evt);
            }
        });

        lblInfo.setText(" ");

        pnPreview.setBackground(new java.awt.Color(255, 255, 255));

        javax.swing.GroupLayout pnPreviewLayout = new javax.swing.GroupLayout(pnPreview);
        pnPreview.setLayout(pnPreviewLayout);
        pnPreviewLayout.setHorizontalGroup(
            pnPreviewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        pnPreviewLayout.setVerticalGroup(
            pnPreviewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 379, Short.MAX_VALUE)
        );

        tfPiecesY.setText("2");
        tfPiecesY.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tfPiecesYKeyReleased(evt);
            }
        });

        btnZoomUp.setText("+");
        btnZoomUp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnZoomUpActionPerformed(evt);
            }
        });

        btnZoomDown.setText("-");
        btnZoomDown.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnZoomDownActionPerformed(evt);
            }
        });

        jMenu1.setText("App");

        menuMergeAll.setText("Merge All");
        menuMergeAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuMergeAllActionPerformed(evt);
            }
        });
        jMenu1.add(menuMergeAll);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pnPreview, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblInfo, javax.swing.GroupLayout.DEFAULT_SIZE, 352, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnZoomDown)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnZoomUp)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(tfPiecesX, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(tfPiecesY, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cbOrientation, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(tfFile))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btnOpen, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnExport, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {tfPiecesX, tfPiecesY});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tfFile, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnOpen))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tfPiecesX, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cbOrientation, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnExport)
                    .addComponent(lblInfo)
                    .addComponent(tfPiecesY, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnZoomUp)
                    .addComponent(btnZoomDown))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnPreview, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnOpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOpenActionPerformed
        openFileChooser();

    }//GEN-LAST:event_btnOpenActionPerformed

    private void openFileChooser() throws HeadlessException {
        zoom = 1f;
        ImageIcon[] images;

        int res = fileChooser.showOpenDialog(this);
        if (res == JFileChooser.APPROVE_OPTION) {
            selected = fileChooser.getSelectedFile();
            tfFile.setText(selected.getAbsolutePath());

            if (selected.isDirectory()) {
                int w = 0;
                int h = 0;
                images = core.getImagesFromDir(selected);
                core.setImages(images);

                if (images.length > 0) {
                    for (ImageIcon ico : images) {
                        w += ico.getIconWidth();
                        h += ico.getIconHeight();

                        //info(ico.getDescription());
                    }

                    int hw = w / (images.length / 2);
                    int hh = h / (images.length / 2);
                    String temp = "%d files %d x %d | %d x %d (%d)";
                    lblInfo.setText(String.format(temp, images.length, w, h, hw, hh, images.length / 2));
                    btnExport.setText("Merge");

                } else {
                    lblInfo.setText("No images found.");
                }
            } else {
                images = new ImageIcon[1];
                images[0] = new ImageIcon(selected.getAbsolutePath());
                core.setImages(images);
                lblInfo.setText(images[0].getIconWidth() + " x " + images[0].getIconHeight());
                btnExport.setText("Split");
            }
        }
    }

    private void tfPiecesXKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tfPiecesXKeyReleased
        updatePieceX();
    }//GEN-LAST:event_tfPiecesXKeyReleased


    private void tfPiecesYKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tfPiecesYKeyReleased
        updatePieceY();
    }//GEN-LAST:event_tfPiecesYKeyReleased


    private void btnExportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExportActionPerformed
        exportImage();
    }//GEN-LAST:event_btnExportActionPerformed

    private void btnZoomDownActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnZoomDownActionPerformed
        zoom -= 0.1f;
        if (zoom < 0.05f) {
            zoom = 0.05f;
        }

    }//GEN-LAST:event_btnZoomDownActionPerformed

    private void btnZoomUpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnZoomUpActionPerformed
        zoom += 0.1f;
    }//GEN-LAST:event_btnZoomUpActionPerformed

    private void menuMergeAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuMergeAllActionPerformed
        mergeAll();

    }//GEN-LAST:event_menuMergeAllActionPerformed

    private void cbOrientationItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cbOrientationItemStateChanged
        core.setOrientation(cbOrientation.getSelectedIndex());
    }//GEN-LAST:event_cbOrientationItemStateChanged

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PiWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PiWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PiWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PiWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PiWindow().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnExport;
    private javax.swing.JButton btnOpen;
    private javax.swing.JButton btnZoomDown;
    private javax.swing.JButton btnZoomUp;
    private javax.swing.JComboBox cbOrientation;
    private javax.swing.JFileChooser fileChooser;
    private javax.swing.JEditorPane jEditorPane1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblInfo;
    private javax.swing.JMenuItem menuMergeAll;
    private javax.swing.JPanel pnPreview;
    private javax.swing.JTextField tfFile;
    private javax.swing.JTextField tfPiecesX;
    private javax.swing.JTextField tfPiecesY;
    // End of variables declaration//GEN-END:variables

    private void updatePieceX() {
        int x = core.getX();

        try {
            x = Integer.parseInt(tfPiecesX.getText());
        } catch (NumberFormatException e) {
            tfPiecesX.setText("1");
        }

        if (x < 1) {
            x = 1;
        }

        core.setX(x);
    }

    private void updatePieceY() {
        int y = core.getY();

        try {
            y = Integer.parseInt(tfPiecesY.getText());
        } catch (NumberFormatException e) {
            tfPiecesY.setText("1");
        }

        if (y < 1) {
            y = 1;
        }

        core.setY(y);
    }

    private JPanel createPanel() {
        return new JPanel() {

            @Override
            protected void paintComponent(Graphics gr) {
                super.paintComponent(gr);
                ImageIcon[] images = core.getImages();

                if (images == null) {
                    return;
                }

                Graphics2D g = (Graphics2D) gr;
                g.scale(zoom, zoom);

                if (images.length == 1) {
                    drawSingleImage(g, images[0]);
                } else {
                    drawMultipleImages(g, images);
                }
            }
        };
    }

    private void drawSingleImage(Graphics2D g, ImageIcon ico) {
        core.drawSingleImage(g, ico);
    }

    private void drawMultipleImages(final Graphics2D g, final ImageIcon[] images) {
        core.drawMultipleImages(g, images);
    }

    private void exportImage() {
        core.exportImage(selected);
    }

    private void posConstructor() {

        final PiWindow w = this;
        new Thread() {

            @Override
            public void run() {
                while (w.isVisible()) {
                    pnPreview.repaint();

                }
            }

        }.start();
    }

    private void mergeAll() throws HeadlessException {
        if (selected == null) {
            JOptionPane.showMessageDialog(this, "No selected file.");
        }

        int res = fileChooser.showOpenDialog(this);
        if (res == JFileChooser.APPROVE_OPTION) {
            File f = fileChooser.getSelectedFile();
            if (f.isDirectory()) {
                File root = new File(".", "out");
                if (!root.exists()) {
                    root.mkdir();
                }

                root = new File(root, f.getName());
                if (!root.exists()) {
                    root.mkdir();
                }

                final MergeCount mc = new MergeCount();

                ImageIcon[] arr = core.getImagesFromDir(f);
                if (arr != null && arr.length > 0) {
                    mc.totalImages += arr.length;
                    String ext = "." + core.getExtension(arr[0].getDescription());
                    try {
                        core.merge(arr, f.getName() + ext, root.getAbsolutePath());
                        mc.images++;
                    } catch (IOException ex) {
                        mc.errors++;
                        Logger.getLogger(PiWindow.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }

                File[] dirs = core.getDirFromDir(f);
                mc.folders = dirs.length;
                core.deepMerge(f, root, dirs, mc);

                JOptionPane.showMessageDialog(this, String.format("Folders: %d, Images: %d / %d, Errors: %d", mc.folders, mc.images, mc.totalImages, mc.errors));
            }
        }
    }

}
